@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main style="background-color: #EEEEEE;">
        <div class="top-row px-4" style="background-color: #EEEEEE; box-shadow: 0 3px 3px rgba(0, 0, 0, 0.4); ">
            @if (isAuthenticated)
            {
                <div style="display: flex; justify-content:space-between; height: 100%; width: 100%; align-items: center;">
                <span>Hi, @userName</span>
                <button class="nav-link btn" style="color:blue" @onclick="Logout">Logout</button>
                </div>
            }
            else
            {
                 <a href="login">Login</a>
                 <a href="register">Register</a>
            }
        </div>
        <article class="content px-4" >
            @Body
        </article>
    </main>
</div>


@code {
    private bool isAuthenticated = false;
    private string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "jwtToken");
        userName = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "name");
        isAuthenticated = !string.IsNullOrEmpty(token);
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "jwtToken");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "role");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "name");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "email");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "mapLng");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "mapLat");
        isAuthenticated = false; 
        await JSRuntime.InvokeVoidAsync("location.reload");

    }
}