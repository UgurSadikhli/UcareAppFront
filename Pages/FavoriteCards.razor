@page "/favorite-cards"
@using System.Net.Http.Json
@inject HttpClient HttpClient

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using UcareAppFront.DTOs

<PageTitle>Favorite Cards</PageTitle>

<div class="container">
    <div class="row">
        @if (favoriteCards != null && favoriteCards.Any())
        {
            @foreach (var card in favoriteCards)
            {
               <div class="col-md-3 mb-4">
                <div class="card" style="height: 100%; display: flex; flex-direction: column;"  @onclick="() => NavigateToDetails(card.Id)">
                    <img src="@card.ImgPath" 
                         style="object-fit: cover; height: 200px; width: 100%;" 
                         alt="@card.Name" />
                    <div class="card-body" style="flex: 1;">
                        <h5 class="card-title" style="font-size: 1.25rem;">@card.Name</h5>
                        <p class="card-text" style="font-size: 0.875rem;"><i class="bi bi-house-door"></i> @card.Address</p>
                        <p class="card-text" style="font-size: 0.875rem;"><i class="bi bi-briefcase"></i> @card.Occupation</p>
                    </div>
                </div>
            </div>
            }
        }
        else
        {
            <div class="col-12">
                <p>No favorite cards found. Let's fix it <a href="cards">home</a></p>
            </div>
        }
    </div>
</div>

<style>
        .card:hover {
        transform: scale(1.02);
        cursor: pointer;
    }


</style>

@code {
    private List<CardDto> allCards;
    private List<CardDto> favoriteCards;
    private bool isFavorite;
    private string favoriteButtonClass = "btn-outline-primary";
    private string favoriteIcon = "bi-heart";

    protected override async Task OnInitializedAsync()
    {
    
            allCards = await HttpClient.GetFromJsonAsync<List<CardDto>>("http://localhost:5026/api/Card");

        var favorites = await GetFavoriteCards();
        favoriteCards = allCards.Where(c => favorites.Contains(c.Id)).ToList();
    }

    private async Task ToggleFavorite(int cardId)
    {
        var favorites = await GetFavoriteCards();
        if (favorites.Contains(cardId))
        {
            favorites.Remove(cardId);
        }
        else
        {
            favorites.Add(cardId);
        }
        await SaveFavoriteCards(favorites);
        favoriteCards = allCards.Where(c => favorites.Contains(c.Id)).ToList();
    }

    private async Task<List<int>> GetFavoriteCards()
    {
        var favoritesJson = await JSRuntime.InvokeAsync<string>("localStorageHelper.getItem", "favorites");
        return string.IsNullOrEmpty(favoritesJson) ? new List<int>() : System.Text.Json.JsonSerializer.Deserialize<List<int>>(favoritesJson);
    }

    private async Task SaveFavoriteCards(List<int> favorites)
    {
        var favoritesJson = System.Text.Json.JsonSerializer.Serialize(favorites);
        await JSRuntime.InvokeVoidAsync("localStorageHelper.setItem", "favorites", favoritesJson);
    }
    private void NavigateToDetails(int id)
    {

        JSRuntime.InvokeVoidAsync("localStorageHelper.setItem", "from", "favorite-cards");
        NavigationManager.NavigateTo($"/card/{id}");
    }
       
}
