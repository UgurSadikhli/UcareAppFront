@page "/login"
@inject HttpClient Http
@using System.Net.Http.Json
@using UcareAppFront.DTOs
@inject IJSRuntime JSRuntime

<h3 class="text-center mb-4">Login</h3>

<div class="container d-flex justify-content-center " style="height: 13.5em;">
    <div class="card p-4" style="max-width: 400px; width: 100%; border-radius: 15px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group position-relative mb-3">
                <i class="bi bi-envelope position-absolute top-50 start-0 translate-middle-y ms-3" style="font-size: 1.2rem; color: #6c757d;"></i>
                <label for="email" class="visually-hidden">Email</label>
                <InputText id="email" class="form-control ps-5" @bind-Value="loginModel.Email" placeholder="Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="form-group position-relative mb-4">
                <i class="bi bi-lock position-absolute top-50 start-0 translate-middle-y ms-3" style="font-size: 1.2rem; color: #6c757d;"></i>
                <label for="password" class="visually-hidden">Password</label>
                <InputText id="password" type="password" class="form-control ps-5" @bind-Value="loginModel.Password" placeholder="Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Login</button>
            <p style="font-size: smaller; margin-top: 4px;">don't have account? <a href="/register">register</a></p>

        </EditForm>
    </div>
</div>

@code {
    private LoginDto loginModel = new LoginDto();
    private bool isAuthenticated = false;
    private string token = string.Empty;

    private async Task HandleLogin()
    {
        var apiUrl = "http://localhost:5026/api/Auth/login";
        var response = await Http.PostAsJsonAsync(apiUrl, loginModel);

        if (response.IsSuccessStatusCode)
        {
            // Read the response content as a JSON object
            var responseData = await response.Content.ReadFromJsonAsync<JsonResponse>();

            if (responseData != null)
            {
                token = responseData.Token;

                // Store the token in local storage
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "jwtToken", token);
                isAuthenticated = true;

                Console.WriteLine("Logged in successfully");
            }
            else
            {
                Console.WriteLine("Login failed: No token received");
            }
        }
        else
        {
            Console.WriteLine("Login failed");
        }
    }

    public class JsonResponse
    {
        public string Token { get; set; }
    }
}
